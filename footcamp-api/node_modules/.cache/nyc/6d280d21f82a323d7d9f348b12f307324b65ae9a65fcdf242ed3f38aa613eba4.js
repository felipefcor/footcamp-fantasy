var cov_1t98w39nn5=function(){var path="/home/felipe/bootcamp/collab/skylab-bootcamp-201907/staff/felipe-fernandez/footcamp/footcamp-api/logic/user/register/index.js";var hash="b7d48bc7551ceacbcfa14b5586316448680e1c18";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/felipe/bootcamp/collab/skylab-bootcamp-201907/staff/felipe-fernandez/footcamp/footcamp-api/logic/user/register/index.js",statementMap:{"0":{start:{line:1,column:19},end:{line:1,column:44}},"1":{start:{line:2,column:29},end:{line:2,column:53}},"2":{start:{line:3,column:15},end:{line:3,column:34}},"3":{start:{line:17,column:0},end:{line:35,column:1}},"4":{start:{line:19,column:4},end:{line:19,column:33}},"5":{start:{line:20,column:4},end:{line:20,column:39}},"6":{start:{line:21,column:4},end:{line:21,column:35}},"7":{start:{line:22,column:4},end:{line:22,column:34}},"8":{start:{line:23,column:4},end:{line:23,column:41}},"9":{start:{line:25,column:4},end:{line:34,column:8}},"10":{start:{line:26,column:21},end:{line:26,column:50}},"11":{start:{line:28,column:8},end:{line:28,column:53}},"12":{start:{line:28,column:18},end:{line:28,column:53}},"13":{start:{line:30,column:21},end:{line:30,column:51}},"14":{start:{line:32,column:8},end:{line:32,column:72}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:17},end:{line:17,column:18}},loc:{start:{line:17,column:58},end:{line:35,column:1}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:25,column:13},end:{line:25,column:14}},loc:{start:{line:25,column:25},end:{line:34,column:5}},line:25}},branchMap:{"0":{loc:{start:{line:28,column:8},end:{line:28,column:53}},type:"if",locations:[{start:{line:28,column:8},end:{line:28,column:53}},{start:{line:28,column:8},end:{line:28,column:53}}],line:28}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"b7d48bc7551ceacbcfa14b5586316448680e1c18"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{validate}=(cov_1t98w39nn5.s[0]++,require('footcamp-utils'));const{models:{User}}=(cov_1t98w39nn5.s[1]++,require('footcamp-data'));const bcrypt=(cov_1t98w39nn5.s[2]++,require('bcryptjs'));/**
 * Register a user 

 * @param {*} name 
 * @param {*} surname 
 * @param {*} email 
 * @param {*} password 
 * @throws {TypeError} - If any param is not a string, email or password

 * @returns {Promise}
 */cov_1t98w39nn5.s[3]++;module.exports=function(name,surname,email,password){cov_1t98w39nn5.f[0]++;cov_1t98w39nn5.s[4]++;validate.string(name,'name');cov_1t98w39nn5.s[5]++;validate.string(surname,'surname');cov_1t98w39nn5.s[6]++;validate.string(email,'email');cov_1t98w39nn5.s[7]++;validate.email(email,'email');cov_1t98w39nn5.s[8]++;validate.string(password,'password');cov_1t98w39nn5.s[9]++;return(async()=>{cov_1t98w39nn5.f[1]++;const user=(cov_1t98w39nn5.s[10]++,await User.findOne({email}));cov_1t98w39nn5.s[11]++;if(user){cov_1t98w39nn5.b[0][0]++;cov_1t98w39nn5.s[12]++;throw Error('User already exists.');}else{cov_1t98w39nn5.b[0][1]++;}const hash=(cov_1t98w39nn5.s[13]++,await bcrypt.hash(password,10));cov_1t98w39nn5.s[14]++;await User.create({name,surname,email,password:hash});})();};